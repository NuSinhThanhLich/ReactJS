{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\React\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return;\n  /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 3\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // return ({isError: true, message: 'Could not fetch events'})\n    // throw new Response(JSON.stringify({message: 'Could not fetch events'}), {status: 500})\n    throw json({\n      message: 'Could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\n// client code not a react component\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadedEvents","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Workspace/React/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const {events} = useLoaderData();\r\n\r\n  return \r\n  <Await resolve={events}>\r\n    {(loadedEvents) => <EventsList events={loadEvents} /> }\r\n  </Await>\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents () {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // return ({isError: true, message: 'Could not fetch events'})\r\n    // throw new Response(JSON.stringify({message: 'Could not fetch events'}), {status: 500})\r\n    throw json ({message: 'Could not fetch events'}, {status: 500})\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport async function loader() {\r\n defer({\r\n  events: loadEvents()\r\n })\r\n}\r\n// client code not a react component\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGT,aAAa,CAAC,CAAC;EAEhC;EACA,aAAAM,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,MAAO;IAAAE,QAAA,EACnBC,YAAY,iBAAKN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AACV;AAACT,EAAA,CAPQD,UAAU;EAAA,QACAP,aAAa;AAAA;AAAAkB,EAAA,GADvBX,UAAU;AASnB,eAAeA,UAAU;AAEzB,eAAeM,UAAUA,CAAA,EAAI;EAC3B,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA,MAAMpB,IAAI,CAAE;MAACqB,OAAO,EAAE;IAAwB,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EACjE,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,eAAeK,MAAMA,CAAA,EAAG;EAC9BtB,KAAK,CAAC;IACLO,MAAM,EAAEI,UAAU,CAAC;EACpB,CAAC,CAAC;AACH;AACA;AAAA,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}