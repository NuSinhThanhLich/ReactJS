{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++; // can use this code because this code cant malipulate the state\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload; // default name \n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = !state.isAuthenticated;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state\n// }\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","initialAuthState","isAuthenticated","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","authSlice","login","store","reducer","counterActions","actions"],"sources":["C:/Workspace/React/01-starting-project-UseRedux/src/store/index.js"],"sourcesContent":["import { createStore } from 'redux'\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit'\r\n\r\nconst initialCounterState = {\r\n    counter: 0,\r\n    showCounter: true\r\n}\r\n\r\nconst initialAuthState = {\r\n    isAuthenticated: false\r\n}\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n        increment(state) {\r\n            state.counter++ // can use this code because this code cant malipulate the state\r\n        },\r\n        decrement(state) {\r\n            state.counter--\r\n        },\r\n        increase(state, action) {\r\n            state.counter = state.counter + action.payload // default name \r\n        },\r\n        toggleCounter(state) {\r\n            state.showCounter = !state.showCounter\r\n        }\r\n    }\r\n})\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        login(state) {\r\n            state.isAuthenticated = !state.isAuthenticated\r\n        }\r\n    }\r\n})\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//     if (action.type === 'increment') {\r\n//         return {\r\n//             counter: state.counter + 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n\r\n//     if (action.type === 'increase') {\r\n//         return {\r\n//             counter: state.counter + action.amount,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n\r\n//     if (action.type === 'decrement') {\r\n//         return {\r\n//             counter: state.counter - 1,\r\n//             showCounter: state.showCounter\r\n//         }\r\n//     }\r\n//     if (action.type === 'toggle') {\r\n//         return {\r\n//             showCounter: !state.showCounter,\r\n//             counter: state.counter\r\n//         }\r\n//     }\r\n//     return state\r\n// }\r\nconst store = configureStore({\r\n    reducer: counterSlice.reducer\r\n})\r\nexport const counterActions = counterSlice.actions\r\nexport default store"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,YAAY,GAAGP,WAAW,CAAC;EAC7BQ,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEP,mBAAmB;EACjCQ,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACT,OAAO,EAAE,EAAC;IACpB,CAAC;;IACDU,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACT,OAAO,EAAE;IACnB,CAAC;IACDW,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACT,OAAO,GAAGS,KAAK,CAACT,OAAO,GAAGY,MAAM,CAACC,OAAO,EAAC;IACnD,CAAC;;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACR,WAAW,GAAG,CAACQ,KAAK,CAACR,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMc,SAAS,GAAGlB,WAAW,CAAC;EAC1BQ,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACNS,KAAKA,CAACP,KAAK,EAAE;MACTA,KAAK,CAACN,eAAe,GAAG,CAACM,KAAK,CAACN,eAAe;IAClD;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMc,KAAK,GAAGnB,cAAc,CAAC;EACzBoB,OAAO,EAAEd,YAAY,CAACc;AAC1B,CAAC,CAAC;AACF,OAAO,MAAMC,cAAc,GAAGf,YAAY,CAACgB,OAAO;AAClD,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}